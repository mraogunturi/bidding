"""
Django settings for pricing project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from datetime import timedelta

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ji8372ypujv9g&tn(o8)t$z1p4c-ewc8w=$cp%c3(a5r172=+y'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    #'djcelery',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # pricing simulation an below are apps
    'pricingsimulation',
    'rest_framework'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
# MIDDLEWARE_CLASSES = [
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.security.SecurityMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'pricingsimulation.backends.EmailAuthBackend',
)


ROOT_URLCONF = 'pricing.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': ['templates'],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#                 'django.template.context_processors.i18n',
#                 'django.template.context_processors.media',
#                 'django.template.context_processors.tz',
#             ],
#         },
#     },
# ]

WSGI_APPLICATION = 'pricing.wsgi.application'


DATABASES = {
   'default': {
       'ENGINE': 'django.db.backends.sqlite3',
       'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
   }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
#         'NAME': 'pricing',                      # Or path to database file if using sqlite3.
#         # The following settings are not used with sqlite3:
#         'USER': 'root',
#         'PASSWORD': 'welcome',
#         'HOST': 'localhost',                      # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.
#         'PORT': 3306,                      # Set to empty string for default.
#         #'ATOMIC_REQUESTS':True
#     }
# }


# DATABASES = {
#
#     'default': {
#          'ENGINE': 'sql_server.pyodbc',
#          'NAME': 'pricingsim',
#          'USER': 'engadmin',
#          'PASSWORD': 'Pricing101',
#          'HOST': 'pricingsim.database.windows.net',
# 	     'PORT': '1433',
#         }
# }

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

# #Local

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'pricing',
#         'USER': 'postgres',
#         'PASSWORD': 'sam123',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }


#on  Oracle DB
# DATABASES=  {
#      'default':{
#          'ENGINE':'django.db.backends.oracle',
#          'NAME':'(DESCRIPTION=(ADDRESS_LIST =(ADDRESS=(PROTOCOL=TCP)(HOST=untcrs186)(PORT=1521))(LOAD_BALANCE=yes))(CONNECT_DATA=(SERVER = DEDICATED)(SERVICE_NAME=ecdw0_jdbc.world)))',
#          'USER':'m80773',
#          'PASSWORD':'isjgbdvc'
#             }
#  }

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#m-dd-yy HH:MM
# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Chicago'

USE_I18N = False

USE_L10N = False

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
LOGIN_URL = '/'
# STATIC_URL = 'http://127.0.0.1:9000/static/'
STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(os.path.dirname(__file__), '..', 'static').replace('\\','/'),)

TEMPLATE_DIRS = (
    os.path.join(BASE_DIR,  'templates'),
    'pricingsimulation',
)

# #

CELERY_IMPORTS = ('pricing.tasks',)

# CELERY_IMPORTS = "pricingsimulation.tasks"
# #BROKER_URL='amqp://test:test@localhost:5672//'
# BROKER_URL='amqp://localhost:5672//' # RabbitMQ
# CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
# CELERY_RESULT_BACKEND='djcelery.backends.database:DatabaseBackend'
# CELERYBEAT_SCHEDULE = {
#     'start-game-every-second': {
#          'task': 'pricingsimulation.tasks.start_game',
#          'schedule': timedelta(seconds=1),
#      }

# }

# 'simulate-game-every-second':{
    #     'task': 'pricingsimulation.tasks.calculate_formulas',
    #     'schedule': timedelta(seconds=1),
    # }

# User password (common to all users)
USER_PASSWORD = "123456"

# Email Settings

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'localhost'
# EMAIL_PORT = 25
# EMAIL_USE_TLS = False
# DEFAULT_FROM_EMAIL = 'noreply@gmail.com'

# SESSION_EXPIRE_AT_BROWSER_CLOSE = True

##########################Logger Settings#####################

# LOGGING = {
#     'version': 1,
#     'handlers': {
#         'console':{
#             'level':'DEBUG',
#             'class':'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django.request': {
#             'handlers':['console'],
#             'propagate': True,
#             'level':'DEBUG',
#         }
#     },
# }


LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format' : "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt' : "%d/%b/%Y %H:%M:%S"
        },
    },
    'handlers': {
        'null': {
            'level':'DEBUG',
            'class':'logging.NullHandler',
        },
        'logfile': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR + "/logfile",
            'maxBytes': 1024*1024*10,
            'backupCount': 2,
            'formatter': 'standard',
        },
        'console':{
            'level':'INFO',
            'class':'logging.StreamHandler',
            'formatter': 'standard'
        },
    },
    'loggers': {
        'django.request': {
            'handlers':['logfile'],
            'propagate': True,
            'level':'DEBUG',
        },
        'django': {
            'handlers':['console'],
            'propagate': True,
            'level':'WARN',
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'pricing': {
            'handlers': ['console', 'logfile'],
            'level': 'DEBUG',
        },
        'pricingsimulation': {
            'handlers': ['console', 'logfile'],
            'level': 'DEBUG',
        },
    }
}


CACHES = {
    'default': {
        'BACKEND': 'pricing.simple_cache.InternalCacheCls',
        'LOCATION': 'unique-snowflake',
    }
}
#
# CACHES = {
#     'default': {
#         'BACKEND': 'redis_cache.RedisCache',
#         'LOCATION': 'localhost:6379',
#     },
# }

# local and remote caching servers